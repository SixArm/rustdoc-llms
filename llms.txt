# Crate Documentation

**Version:** 0.3.0

**Format Version:** 43

# Module `rustdoc_llms`

# rustdoc-llms

Rust documentation helper that helps a Rust crate developer generate a file
`llms.txt` that helps provide context to large language models (LLMs).

Thanks to excellent work by the Rust team, rustdoc team, and rustdoc-md team.

## How to use this

Install:

```sh
cargo install rustdoc-llms
```

Use the tool when you're working on a crate and you want to document it:

```sh
rustdoc-llms
```

The tool creates two files:

* `target/doc/foo_bar.json` (this uses your own crate naming convention)

* `target/doc/llms.txt` (this is a markdown file created by rustdoc-md)

If you like, you can copy these files to the top level of your repository, which
can make the files easier to find for search engines and AI systems:

```sh
cp target/doc/foo_bar.json llms.json
cp target/doc/llms.txt llms.txt
```

## Scope

This Rust crate is deliberately small and simple. The purpose is to make it
slightly-easier to generate `llms` based on what's currently easy and available
for Rust crate developers.

Currently this tool calls existing command line interfaces, using `cargo` and
`rustdoc-md` with specialized compiler flags. If this tool is useful in
practice, then I intend to iterate to add command line arguments, options,
tests, and the like.

## Contributing

Pull requests are welcome. Issues are welcome.

If you want to help in other ways, or provide constructive criticism, or ask
questions directly, then please feel free to contact me. I'm Joel Parker
Henderson and my email is <joel@joelparkerhenderson.com>.

## What this does

This implements the help description [here](https://crates.io/crates/rustdoc-md).

Step 1: Generate JSON documentation:

```sh
RUSTC_BOOTSTRAP=1 RUSTDOCFLAGS="-Z unstable-options --output-format json" cargo doc --no-deps
```

Step 2: Convert from JSON into Markdown:

```sh
rustdoc-md --path target/doc/foo_bar.json --output target/doc/foo_bar.md
```

Step 3: Copy from Markdown file into LLMs file:

```sh
cp target/doc/foo_bar.json llms.json
cp target/doc/foo_bar.md llms.txt
```

## Modules

## Module `cargo_helpers`

```rust
pub(crate) mod cargo_helpers { /* ... */ }
```

### Functions

#### Function `lib_name`

Get a crate's lib name from its Cargo.toml file.

Steps:

1. Read the `Cargo.toml` file
2. Parse it as TOML
3. If there is a `[lib]` section with a `name` field, then return it.
4. If there is a `package.name`, then return it.
5. Otherwise return an error.

This llb name priority follows Cargo's explicit rules about library naming:
`[lib].name` takes precedence over `package.name`.


```rust
pub fn lib_name</* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>>(path: impl AsRef<std::path::Path>) -> Result<String, Box<dyn std::error::Error>> { /* ... */ }
```

## Functions

### Function `main`

Run this command to generate the documentation LLMS file.

Example:

```sh
rustdoc-llms
```

You may wish to copy the output files to the root of your crate:

```sh
cp target/doc/foo_bar.json llms.json
cp target/doc/llms.txt llms.txt
```


```rust
pub(crate) fn main() { /* ... */ }
```

### Function `cargo_toml_path`

Get the path to the file `Cargo.toml`.

```rust
pub fn cargo_toml_path() -> std::path::PathBuf { /* ... */ }
```

### Function `documentation_json_path`

Get the target JSON file base name; this file is what cargo doc generates.
The name is the crate's lib target's name with all - chars turned into _.

Example:

```rust
use rustdoc_llms::*;
let path = rustdoc_md::documentation_json_path();
```


```rust
pub fn documentation_json_path() -> std::path::PathBuf { /* ... */ }
```

### Function `documentation_llms_path`

This is the name of the goal LLMS file that will be generated by rustdoc-md.
The industry standard file name is `llms.txt` though you can use anything.

Example:

```rust
use rustdoc_llms::*;
let path = rustdoc_md::documentation_llms_path();
```


```rust
pub fn documentation_llms_path() -> std::path::PathBuf { /* ... */ }
```

### Function `generate_documentation_json_file`

Run cargo doc with args to output one JSON file with all the combined documentation.

Example:

```rust
use rustdoc_llms::*;
let path = rustdoc_md::generate_documentation_json_file();
```


```rust
pub fn generate_documentation_json_file() { /* ... */ }
```

### Function `generate_documentation_llms_file`

Run rustdoc-md with an input file path and output file path.

Example:

```rust
use rustdoc_llms::*;
let input_json_path = rustdoc_md::documentation_json_path();
let output_llms_path = rustdoc_md::documentation_llms_path();
let path = rustdoc_md::generate_documentation_llms_file(input_json_path, output_llms_path);
```


```rust
pub fn generate_documentation_llms_file</* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>, /* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>>(input_json_path: impl AsRef<std::path::Path>, output_llms_path: impl AsRef<std::path::Path>) { /* ... */ }
```

