# Crate Documentation

**Version:** 0.2.0

**Format Version:** 43

# Module `rustdoc_llms`

## Modules

## Module `cargo_helpers`

```rust
pub(crate) mod cargo_helpers { /* ... */ }
```

### Functions

#### Function `lib_name`

Get a crate's lib name from its Cargo.toml file.
 
Steps:
 
1. Read the `Cargo.toml` file
2. Parse it as TOML
3. If there is a `[lib]` section with a `name` field, then return it.
4. If there is a `package.name`, then return it.
5. Otherwise return an error.

This llb name priority follows Cargo's explicit rules about library naming:
`[lib].name` takes precedence over `package.name`.


```rust
pub fn lib_name</* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>>(path: impl AsRef<std::path::Path>) -> Result<String, Box<dyn std::error::Error>> { /* ... */ }
```

## Functions

### Function `main`

```rust
pub(crate) fn main() { /* ... */ }
```

### Function `cargo_toml_path`

Get the path to the file `Cargo.toml`.

```rust
pub fn cargo_toml_path() -> std::path::PathBuf { /* ... */ }
```

### Function `documentation_json_path`

Get the target JSON file base name; this file is what cargo doc generates.
The name is the crate's lib target's name with all - chars turned into _.

```rust
pub fn documentation_json_path() -> std::path::PathBuf { /* ... */ }
```

### Function `documentation_llms_path`

This is the name of the goal LLMS file that will be generated by rustdoc-md.
The industry standard file name is `llms.txt` though you can use anything.

```rust
pub fn documentation_llms_path() -> std::path::PathBuf { /* ... */ }
```

### Function `generate_documentation_json_file`

Run cargo doc with args to output one JSON file with all the combined documentation.

```rust
pub fn generate_documentation_json_file() { /* ... */ }
```

### Function `generate_documentation_llms_file`

Run rustdoc-md with an input file path and output file path.

```rust
pub fn generate_documentation_llms_file</* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>, /* synthetic */ impl AsRef<Path>: AsRef<std::path::Path>>(input_json_path: impl AsRef<std::path::Path>, output_llms_path: impl AsRef<std::path::Path>) { /* ... */ }
```

