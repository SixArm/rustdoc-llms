use std::process::Command;
use std::path::{Path, PathBuf};

mod cargo_helpers;

fn main() {
    let documentation_json_path = documentation_json_path();
    let documentation_llms_path = documentation_llms_path();
    generate_documentation_json_file();
    generate_documentation_llms_file(documentation_json_path, documentation_llms_path);
}

/// Get the path to the file `Cargo.toml`.
pub fn cargo_toml_path() -> PathBuf {
    PathBuf::from("Cargo.toml")
}

/// Get the target JSON file base name; this file is what cargo doc generates.
/// The name is the crate's lib target's name with all - chars turned into _.
pub fn documentation_json_path() -> PathBuf {
    let lib_name = crate::cargo_helpers::lib_name(cargo_toml_path()).expect("lib_name");
    PathBuf::from(format!("target/doc/{}.json", str::replace(&lib_name, "-", "_")))
}

/// This is the name of the goal LLMS file that will be generated by rustdoc-md.
/// The industry standard file name is `llms.txt` though you can use anything.
pub fn documentation_llms_path() -> PathBuf {
    PathBuf::from("target/doc/llms.txt")
}   

/// Run cargo doc with args to output one JSON file with all the combined documentation.
pub fn generate_documentation_json_file() {
    let path = documentation_json_path();
    println!("Generate documentation JSON file: {}", path.display());
    let _output = Command::new("cargo")
        .env("RUSTC_BOOTSTRAP", "1")
        .env("RUSTDOCFLAGS", "-Z unstable-options --output-format json")
        .arg("doc")
        .arg("--no-deps")
        .output()
    .expect("command failed to start");
    // println!("stdout: {}", String::from_utf8_lossy(&output.stdout));
    // println!("stderr: {}", String::from_utf8_lossy(&output.stderr));
}

/// Run rustdoc-md with an input file path and output file path.
pub fn generate_documentation_llms_file(input_json_path: impl AsRef<Path>, output_llms_path: impl AsRef<Path>) {
    println!("Generate documentation LLMS file: {}", output_llms_path.as_ref().display());
    let _output = Command::new("rustdoc-md")
        .arg("--path")
        .arg(input_json_path.as_ref())
        .arg("--output")
        .arg(output_llms_path.as_ref())
        .output()
        .expect("command failed to start");
    // println!("stdout: {}", String::from_utf8_lossy(&output.stdout));
    // println!("stderr: {}", String::from_utf8_lossy(&output.stderr));
}

